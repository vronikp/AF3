'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5446
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos


#Region "ActivoValor"
Public Class ActivoValor

  Const _Procedimiento As String = "proc_ActivoValor"

  Private mActivo As Activo = Nothing

  Private mPardetTipoDepreciacion As WWTSParametroDet = Nothing

  Private mPardetTipoValoracion As WWTSParametroDet = Nothing

  Private mPardetFrecuenciaDepreciacion As WWTSParametroDet = Nothing

  Private mActivocomponente As ActivoComponente = Nothing

  Private mPerito As Perito = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Activo_Codigo As Integer, ByVal _Parame_TipoDepreciacion As Integer, ByVal _Pardet_TipoDepreciacion As Integer, ByVal _ActVal_Secuencia As Integer)
    Me.New(_OperadorDatos, False)
    Activo_Codigo = _Activo_Codigo
    Parame_TipoDepreciacion = _Parame_TipoDepreciacion
    Pardet_TipoDepreciacion = _Pardet_TipoDepreciacion
    ActVal_Secuencia = _ActVal_Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto ActivoValor")
    End If
  End Sub

  'Activo
  Public Overridable Property Activo() As Activo
    Get
      If mActivo Is Nothing AndAlso Activo_Codigo > 0 Then
        mActivo = New Activo(OperadorDatos, Activo_Codigo)
      End If
      Return Me.mActivo
    End Get
    Set(value As Activo)
      Me.mActivo = value
      Activo_Codigo = value.Activo_Codigo
    End Set
  End Property

  'Activocomponente 
  Public Overridable Property Activocomponente() As ActivoComponente
    Get
      If mActivocomponente Is Nothing AndAlso ActCom_Secuencia > 0 Then
        mActivocomponente = New ActivoComponente(OperadorDatos, Activo_Codigo, ActCom_Secuencia)
      End If
      Return Me.mActivocomponente
    End Get
    Set(value As ActivoComponente)
      Me.mActivocomponente = value
      If value Is Nothing Then
        ActCom_Secuencia = 0
      Else
        ActCom_Secuencia = value.ActCom_Secuencia
      End If
    End Set
  End Property

  'Perito 
  Public Overridable Property Perito() As Perito
    Get
      If mPerito Is Nothing AndAlso Entida_Perito > 0 Then
        mPerito = New Perito(OperadorDatos, Entida_Perito)
      End If
      Return Me.mPerito
    End Get
    Set(value As Perito)
      Me.mPerito = value
      If value Is Nothing Then
        Entida_Perito = 0
      Else
        Entida_Perito = value.Entida_Codigo
      End If
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetTipoDepreciacion() As WWTSParametroDet
    Get
      If mPardetTipoDepreciacion Is Nothing AndAlso Pardet_TipoDepreciacion > 0 Then
        mPardetTipoDepreciacion = New WWTSParametroDet(OperadorDatos, Parame_TipoDepreciacion, Pardet_TipoDepreciacion)
      End If
      Return Me.mPardetTipoDepreciacion
    End Get
    Set(value As WWTSParametroDet)
      Me.mPardetTipoDepreciacion = value
      Parame_TipoDepreciacion = value.Parame_Codigo
      Pardet_TipoDepreciacion = value.Pardet_Secuencia
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetTipoValoracion() As WWTSParametroDet
    Get
      If mPardetTipoValoracion Is Nothing AndAlso Pardet_TipoValoracion > 0 Then
        mPardetTipoValoracion = New WWTSParametroDet(OperadorDatos, Parame_TipoValoracion, Pardet_TipoValoracion)
      End If
      Return Me.mPardetTipoValoracion
    End Get
    Set(value As WWTSParametroDet)
      Me.mPardetTipoValoracion = value
      Parame_TipoValoracion = value.Parame_Codigo
      Pardet_TipoValoracion = value.Pardet_Secuencia
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetFrecuenciaDepreciacion() As WWTSParametroDet
    Get
      If mPardetFrecuenciaDepreciacion Is Nothing AndAlso Pardet_FrecuenciaDepreciacion > 0 Then
        mPardetFrecuenciaDepreciacion = New WWTSParametroDet(OperadorDatos, Parame_FrecuenciaDepreciacion, Pardet_FrecuenciaDepreciacion)
      End If
      Return Me.mPardetFrecuenciaDepreciacion
    End Get
    Set(value As WWTSParametroDet)
      Me.mPardetFrecuenciaDepreciacion = value
      Parame_FrecuenciaDepreciacion = value.Parame_Codigo
      Pardet_FrecuenciaDepreciacion = value.Pardet_Secuencia
    End Set
  End Property

  Public ReadOnly Property activoString As String
    Get
      If Activo Is Nothing Then
        Return String.Empty
      Else
        Return Activo.Descripcion
      End If
    End Get
  End Property

  Public ReadOnly Property Descripcion As String
    Get
      Return String.Format("{0} {1} {2}", activoString, FrecuenciaString, TipoValoracionString)
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Activo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Logico, 45, True)> _
  Public ReadOnly Property esActivo() As Boolean
    Get
      Return ActVal_Activo
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Tipo Depreciación", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 90, True)> _
  Public ReadOnly Property TipoDepreciacionString() As String
    Get
      If PardetTipoDepreciacion Is Nothing Then
        Return String.Empty
      Else
        Return PardetTipoDepreciacion.Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Fecha", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Fecha, 90, True)> _
  Public ReadOnly Property Fecha() As Date
    Get
      Return ActVal_FechaValoracion
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Tipo Valoración", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 130, True)> _
  Public ReadOnly Property TipoValoracionString() As String
    Get
      If PardetTipoValoracion Is Nothing Then
        Return String.Empty
      Else
        If Pardet_TipoValoracion = Enumerados.enumTipoValoracion.Erogacion Then
          Return " └─" + PardetTipoValoracion.Descripcion + "  " + IIf(ActVal_ValorErogacion >= 0, "+", "-") + ActVal_ValorErogacion.ToString("0.00")
        Else
          Return PardetTipoValoracion.Descripcion
        End If
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Costo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 75, True)> _
  Public ReadOnly Property Costo() As String
    Get
      Return (ActVal_Costo - ActVal_DeprecAcumAnt).ToString("0.00")
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Salvamento", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 75, True)> _
  Public ReadOnly Property Salvamento() As String
    Get
      Return ActVal_Salvamento.ToString("0.00")
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Valor depreciable", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 75, True)> _
  Public ReadOnly Property ValorDepreciable() As String
    Get
      Return (ActVal_Costo - ActVal_DeprecAcumAnt - ActVal_Salvamento).ToString("0.00")
    End Get
  End Property

  Public ReadOnly Property Depreciado As Decimal
    Get
      If Depreciaciones Is Nothing Then
        Return 0
      Else
        Dim suma As Decimal = 0
        For Each _deprec As DepreciacionDet In Depreciaciones
          suma += _deprec.Deprec_Valor
        Next
        Return suma
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Remanente", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 75, True)> _
  Public ReadOnly Property Remanente() As String
    Get
      Return (ActVal_Costo - ActVal_DeprecAcumAnt - ActVal_Salvamento - Depreciado).ToString("0.00")
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Periodos Depreciables", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 75, True)> _
  Public ReadOnly Property PeriodosDepreciables() As String
    Get
      Return (ActVal_PeriodosDepreciables - ActVal_NumDeprecAcumAnt).ToString
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Perito", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 120, True)> _
  Public ReadOnly Property PeritoString() As String
    Get
      If Perito Is Nothing Then
        Return String.Empty
      Else
        Return Perito.NombreCompleto
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Frecuencia", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 100, True)> _
  Public ReadOnly Property FrecuenciaString() As String
    Get
      If PardetFrecuenciaDepreciacion Is Nothing Or Pardet_TipoValoracion = Enumerados.enumTipoValoracion.Erogacion Then
        Return String.Empty
      Else
        Return PardetFrecuenciaDepreciacion.Descripcion
      End If
    End Get
  End Property

  Public ReadOnly Property Depreciaciones As DepreciacionDetList
    Get
      If EsNuevo Then
        Return Nothing
      Else
        Return DepreciacionDetList.ObtenerLista(Me)
      End If
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Activo_Codigo = CType(Fila("Activo_Codigo"), Integer)
    Parame_TipoDepreciacion = CType(Fila("Parame_TipoDepreciacion"), Integer)
    Pardet_TipoDepreciacion = CType(Fila("Pardet_TipoDepreciacion"), Integer)
    ActVal_Secuencia = CType(Fila("ActVal_Secuencia"), Integer)
    Parame_TipoValoracion = CType(Fila("Parame_TipoValoracion"), Integer)
    Pardet_TipoValoracion = CType(Fila("Pardet_TipoValoracion"), Integer)
    ActVal_Costo = CType(Fila("ActVal_Costo"), Decimal)
    ActVal_Salvamento = CType(Fila("ActVal_Salvamento"), Decimal)
    ActVal_PeriodosDepreciables = CType(Fila("ActVal_PeriodosDepreciables"), Integer)
    ActVal_FechaValoracion = CDate(Fila("ActVal_FechaValoracion"))
    If TypeOf Fila("Entida_Perito") Is DBNull Then
      Entida_Perito = 0
    Else
      Entida_Perito = CType(Fila("Entida_Perito"), Integer)
    End If
    ActVal_Activo = CType(Fila("ActVal_Activo"), Boolean)
    If TypeOf Fila("ActCom_Secuencia") Is DBNull Then
      ActCom_Secuencia = 0
    Else
      ActCom_Secuencia = CType(Fila("ActCom_Secuencia"), Integer)
    End If
    Parame_FrecuenciaDepreciacion = CType(Fila("Parame_FrecuenciaDepreciacion"), Integer)
    Pardet_FrecuenciaDepreciacion = CType(Fila("Pardet_FrecuenciaDepreciacion"), Integer)
    If TypeOf Fila("ActVal_ValorErogacion") Is DBNull Then
      ActVal_ValorErogacion = 0
    Else
      ActVal_ValorErogacion = CDec(Fila("ActVal_ValorErogacion"))
    End If
    If TypeOf Fila("ActVal_DeprecAcumAnt") Is DBNull Then
      ActVal_DeprecAcumAnt = 0
    Else
      ActVal_DeprecAcumAnt = CDec(Fila("ActVal_DeprecAcumAnt"))
    End If
    If TypeOf Fila("ActVal_NumDeprecAcumAnt") Is DBNull Then
      ActVal_NumDeprecAcumAnt = 0
    Else
      ActVal_NumDeprecAcumAnt = CInt(Fila("ActVal_NumDeprecAcumAnt"))
    End If
    mActivo = Nothing
    mActivocomponente = Nothing
    mPerito = Nothing
    mPardetTipoDepreciacion = Nothing
    mPardetTipoValoracion = Nothing
    mPardetFrecuenciaDepreciacion = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.DataTable = New System.Data.DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.AgregarParametro("@Parame_TipoDepreciacion", Parame_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@Pardet_TipoDepreciacion", Pardet_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@ActVal_Secuencia", ActVal_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.AgregarParametro("@Parame_TipoDepreciacion", Parame_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@Pardet_TipoDepreciacion", Pardet_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@ActVal_Secuencia", ActVal_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_TipoValoracion", Parame_TipoValoracion)
    OperadorDatos.AgregarParametro("@Pardet_TipoValoracion", Pardet_TipoValoracion)
    OperadorDatos.AgregarParametro("@ActVal_Costo", ActVal_Costo)
    OperadorDatos.AgregarParametro("@ActVal_Salvamento", ActVal_Salvamento)
    OperadorDatos.AgregarParametro("@ActVal_PeriodosDepreciables", ActVal_PeriodosDepreciables)
    OperadorDatos.AgregarParametro("@ActVal_FechaValoracion", ActVal_FechaValoracion)
    OperadorDatos.AgregarParametro("@Entida_Perito", Entida_Perito)
    OperadorDatos.AgregarParametro("@ActVal_Activo", ActVal_Activo)
    OperadorDatos.AgregarParametro("@ActCom_Secuencia", ActCom_Secuencia)
    OperadorDatos.AgregarParametro("@Parame_FrecuenciaDepreciacion", Parame_FrecuenciaDepreciacion)
    OperadorDatos.AgregarParametro("@Pardet_FrecuenciaDepreciacion", Pardet_FrecuenciaDepreciacion)
    OperadorDatos.AgregarParametro("@ActVal_ValorErogacion", ActVal_ValorErogacion)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If EsNuevo Then
        ActVal_Secuencia = Result
      End If
      If OperadorDatos.EstaenTransaccion Then
      Else
        Me.AceptarCambios()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.AgregarParametro("@Parame_TipoDepreciacion", Parame_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@Pardet_TipoDepreciacion", Pardet_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@ActVal_Secuencia", ActVal_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "ActivoValorList"
Public Class ActivoValorList
  Inherits System.ComponentModel.BindingList(Of ActivoValor)

  Public Shared Function ObtenerLista(ByVal _Activo As Activo, Optional ByVal _filtro As String = "") As ActivoValorList
    Dim oResult As New ActivoValorList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Activo.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Activo_Codigo", _Activo.Activo_Codigo)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_ActivoValor"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New ActivoValor(_Activo.OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
