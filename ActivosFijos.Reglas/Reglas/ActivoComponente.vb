'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5446
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos


#Region "ActivoComponente"
Public Class ActivoComponente

  Const _Procedimiento As String = "proc_ActivoComponente"

  Private mActivo As Activo = Nothing

  Private mProveedor As Proveedor = Nothing

  Private mPardetMarca As WWTSParametroDet = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Activo_Codigo As Integer, ByVal _ActCom_Secuencia As Integer)
    Me.New(_OperadorDatos, False)
    Activo_Codigo = _Activo_Codigo
    ActCom_Secuencia = _ActCom_Secuencia
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto ActivoComponente")
    End If
  End Sub

  'Activo
  Public Overridable Property Activo() As Activo
    Get
      If mActivo Is Nothing AndAlso Activo_Codigo > 0 Then
        mActivo = New Activo(OperadorDatos, Activo_Codigo)
      End If
      Return Me.mActivo
    End Get
    Set(value As Activo)
      Me.mActivo = value
      Activo_Codigo = value.Activo_Codigo
    End Set
  End Property

  'Proveedor
  Public Overridable Property Proveedor() As Proveedor
    Get
      If mProveedor Is Nothing AndAlso Entida_Proveedor > 0 Then
        mProveedor = New Proveedor(OperadorDatos, Entida_Proveedor)
      End If
      Return Me.mProveedor
    End Get
    Set(value As Proveedor)
      Me.mProveedor = value
      Entida_Proveedor = value.Entida_Codigo
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetMarca As WWTSParametroDet
    Get
      If mPardetMarca Is Nothing AndAlso Pardet_Marca > 0 Then
        mPardetMarca = New WWTSParametroDet(OperadorDatos, Parame_Marca, Pardet_Marca)
      End If
      Return Me.mPardetMarca
    End Get
    Set(value As WWTSParametroDet)
      Me.mPardetMarca = value
      Parame_Marca = value.Parame_Codigo
      Pardet_Marca = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Activo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Logico, 45, True)> _
  Public ReadOnly Property esActivo() As Boolean
    Get
      Return ActCom_Activo
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Descripción", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 120, True)> _
  Public ReadOnly Property DescripcionString() As String
    Get
      Return ActCom_Descripcion
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Marca", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 120, True)> _
  Public ReadOnly Property MarcaString() As String
    Get
      If PardetMarca Is Nothing Then
        Return String.Empty
      Else
        Return PardetMarca.Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Modelo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 120, True)> _
  Public ReadOnly Property Modelo() As String
    Get
      Return ActCom_Modelo
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Serie", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 120, True)> _
  Public ReadOnly Property Serie() As String
    Get
      Return ActCom_Serie
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Erogación", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Logico, 65, True)> _
  Public ReadOnly Property esErogacion() As Boolean
    Get
      Return ActCom_esErogacion
    End Get
  End Property

  Public ReadOnly Property Descripcion As String
    Get
      Return String.Format("{0} {0} {0}", ActCom_Descripcion, MarcaString, ActCom_Modelo)
    End Get
  End Property

  Private mAceptado As Boolean = False
  Public Property Aceptado As Boolean
    Get
      Return mAceptado
    End Get
    Set(value As Boolean)
      mAceptado = value
    End Set
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Activo_Codigo = CType(Fila("Activo_Codigo"), Integer)
    ActCom_Secuencia = CType(Fila("ActCom_Secuencia"), Integer)
    ActCom_Activo = CType(Fila("ActCom_Activo"), Boolean)
    ActCom_Descripcion = CType(Fila("ActCom_Descripcion"), String)
    Parame_Marca = CType(Fila("Parame_Marca"), Integer)
    Pardet_Marca = CType(Fila("Pardet_Marca"), Integer)
    ActCom_Modelo = CStr(Fila("ActCom_Modelo"))
    ActCom_Serie = CType(Fila("ActCom_Serie"), String)
    ActCom_esErogacion = CType(Fila("ActCom_esErogacion"), Boolean)
    ActCom_ValorErogacion = CType(Fila("ActCom_ValorErogacion"), Decimal)
    ActCom_FechaAdquisicion = CDate(Fila("ActCom_FechaAdquisicion"))
    If TypeOf Fila("ActCom_FechaIngreso") Is DBNull Then
      ActCom_FechaIngreso = Now.Date
    Else
      ActCom_FechaIngreso = CDate(Fila("ActCom_FechaIngreso"))
    End If
    Entida_Proveedor = CType(Fila("Entida_Proveedor"), Integer)
    ActCom_Factura = CType(Fila("ActCom_Factura"), String)
    If TypeOf Fila("ActCom_FechaBaja") Is DBNull Then
      ActCom_FechaBaja = Nothing
    Else
      ActCom_FechaBaja = CDate(Fila("ActCom_FechaBaja"))
    End If
    mActivo = Nothing
    mProveedor = Nothing
    mPardetMarca = Nothing
    mAceptado = True
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.DataTable = New System.Data.DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.AgregarParametro("@ActCom_Secuencia", ActCom_Secuencia)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.AgregarParametro("@ActCom_Secuencia", ActCom_Secuencia)
    OperadorDatos.AgregarParametro("@ActCom_Activo", ActCom_Activo)
    OperadorDatos.AgregarParametro("@ActCom_Descripcion", ActCom_Descripcion)
    OperadorDatos.AgregarParametro("@Parame_Marca", Parame_Marca)
    OperadorDatos.AgregarParametro("@Pardet_Marca", Pardet_Marca)
    OperadorDatos.AgregarParametro("@ActCom_Modelo", ActCom_Modelo)
    OperadorDatos.AgregarParametro("@ActCom_Serie", ActCom_Serie)
    OperadorDatos.AgregarParametro("@ActCom_esErogacion", ActCom_esErogacion)
    OperadorDatos.AgregarParametro("@ActCom_ValorErogacion", ActCom_ValorErogacion)
    OperadorDatos.AgregarParametro("@ActCom_FechaAdquisicion", ActCom_FechaAdquisicion)
    OperadorDatos.AgregarParametro("@ActCom_FechaIngreso", ActCom_FechaIngreso)
    OperadorDatos.AgregarParametro("@Entida_Proveedor", Entida_Proveedor)
    OperadorDatos.AgregarParametro("@ActCom_Factura", ActCom_Factura)
    If Not ActCom_Activo Then
      OperadorDatos.AgregarParametro("@ActCom_FechaBaja", ActCom_FechaBaja)
    End If
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If EsNuevo Then
        ActCom_Secuencia = Result
      End If
      If Not OperadorDatos.EstaenTransaccion Then
        Me.AceptarCambios()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.AgregarParametro("@ActCom_Secuencia", ActCom_Secuencia)
    OperadorDatos.AgregarParametro("@ActCom_esErogacion", ActCom_esErogacion)
    OperadorDatos.AgregarParametro("@ActCom_ValorErogacion", ActCom_ValorErogacion)
    OperadorDatos.AgregarParametro("@ActCom_FechaAdquisicion", ActCom_FechaAdquisicion)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "ActivoComponenteList"
Public Class ActivoComponenteList
  Inherits System.ComponentModel.BindingList(Of ActivoComponente)

  Public Shared Function ObtenerLista(ByVal _Activo As Activo, Optional ByVal _filtro As String = "") As ActivoComponenteList
    Dim oResult As New ActivoComponenteList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Activo.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Activo_Codigo", _Activo.Activo_Codigo)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_ActivoComponente"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New ActivoComponente(_Activo.OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
