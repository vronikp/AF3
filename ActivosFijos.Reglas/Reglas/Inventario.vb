'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5446
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos


#Region "Inventario"
Public Class Inventario

  Const _Procedimiento As String = "proc_Inventario"

  Private mPardetUbicacion As WWTSParametroDet = Nothing

  Private mPardetPeriodoInventario As WWTSParametroDet = Nothing

  Private mPardetEstadoInventario As WWTSParametroDet = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Parame_Ubicacion As Integer, ByVal _Pardet_Ubicacion As Integer, ByVal _Parame_PeriodoInventario As Integer, ByVal _Pardet_PeriodoInventario As Integer)
    Me.New(_OperadorDatos, False)
    Parame_Ubicacion = _Parame_Ubicacion
    Pardet_Ubicacion = _Pardet_Ubicacion
    Parame_PeriodoInventario = _Parame_PeriodoInventario
    Pardet_PeriodoInventario = _Pardet_PeriodoInventario
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto Inventario")
    End If
  End Sub

  'Parametrodet
  Public Overridable Overloads Property PardetUbicacion() As WWTSParametroDet
    Get
      If mPardetUbicacion Is Nothing AndAlso Pardet_Ubicacion > 0 Then
        mPardetUbicacion = New WWTSParametroDet(OperadorDatos, Parame_Ubicacion, Pardet_Ubicacion)
      End If
      Return Me.mPardetUbicacion
    End Get
    Set(value As WWTSParametroDet)
      Me.mPardetUbicacion = value
      Parame_Ubicacion = value.Parame_Codigo
      Pardet_Ubicacion = value.Pardet_Secuencia
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetPeriodoInventario() As WWTSParametroDet
    Get
      If mPardetPeriodoInventario Is Nothing AndAlso Pardet_PeriodoInventario > 0 Then
        mPardetPeriodoInventario = New WWTSParametroDet(OperadorDatos, Parame_PeriodoInventario, Pardet_PeriodoInventario)
      End If
      Return Me.mPardetPeriodoInventario
    End Get
    Set(value As WWTSParametroDet)
      Me.mPardetPeriodoInventario = value
      Parame_PeriodoInventario = value.Parame_Codigo
      Pardet_PeriodoInventario = value.Pardet_Secuencia
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetEstadoInventario() As WWTSParametroDet
    Get
      If mPardetEstadoInventario Is Nothing AndAlso Pardet_EstadoInventario > 0 Then
        mPardetEstadoInventario = New WWTSParametroDet(OperadorDatos, Parame_EstadoInventario, Pardet_EstadoInventario)
      End If
      Return Me.mPardetEstadoInventario
    End Get
    Set(value As WWTSParametroDet)
      Me.mPardetEstadoInventario = value
      Parame_EstadoInventario = value.Parame_Codigo
      Pardet_EstadoInventario = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Ubicación", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 350, True)> _
  Public ReadOnly Property UbicacionString() As String
    Get
      If PardetUbicacion Is Nothing Then
        Return String.Empty
      Else
        Return PardetUbicacion.DescripcionLarga
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Periodo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 120, True)> _
  Public ReadOnly Property PeriodoString() As String
    Get
      If PardetPeriodoInventario Is Nothing Then
        Return String.Empty
      Else
        Return PardetPeriodoInventario.Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Estado", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 120, True)> _
  Public ReadOnly Property EstadoString() As String
    Get
      If PardetEstadoInventario Is Nothing Then
        Return String.Empty
      Else
        Return PardetEstadoInventario.Descripcion
      End If
    End Get
  End Property

  Public ReadOnly Property Descripcion As String
    Get
      Return String.Format("{0} {1}", PeriodoString, UbicacionString)
    End Get
  End Property

#Region "InventarioDet"
  Private WithEvents mInventarioDets As InventarioDetList = Nothing

  Public Property InventarioDets As InventarioDetList
    Get
      If mInventarioDets Is Nothing Then
        If EsNuevo Then
          mInventarioDets = New InventarioDetList
        Else
          mInventarioDets = InventarioDetList.ObtenerLista(Me)
        End If
      End If
      Return mInventarioDets
    End Get
    Set(value As InventarioDetList)
      mInventarioDets = value
    End Set
  End Property

  Private Sub mInventarioDets_AddingNew(sender As Object, e As System.ComponentModel.AddingNewEventArgs) Handles mInventarioDets.AddingNew
    Dim _caract = New InventarioDet(OperadorDatos, True)
    _caract.Inventario = Me
    e.NewObject = _caract
  End Sub
#End Region

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Parame_Ubicacion = CType(Fila("Parame_Ubicacion"), Integer)
    Pardet_Ubicacion = CType(Fila("Pardet_Ubicacion"), Integer)
    Parame_PeriodoInventario = CType(Fila("Parame_PeriodoInventario"), Integer)
    Pardet_PeriodoInventario = CType(Fila("Pardet_PeriodoInventario"), Integer)
    Invent_Descripcion = CType(Fila("Invent_Descripcion"), String)
    Invent_Fecha = CDate(Fila("Invent_Fecha"))
    Parame_EstadoInventario = CInt(Fila("Parame_EstadoInventario"))
    Pardet_EstadoInventario = CInt(Fila("Pardet_EstadoInventario"))

    mPardetUbicacion = Nothing
    mPardetPeriodoInventario = Nothing
    mPardetEstadoInventario = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.DataTable = New System.Data.DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Parame_Ubicacion", Parame_Ubicacion)
    OperadorDatos.AgregarParametro("@Pardet_Ubicacion", Pardet_Ubicacion)
    OperadorDatos.AgregarParametro("@Parame_PeriodoInventario", Parame_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Pardet_PeriodoInventario", Pardet_PeriodoInventario)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If

    Dim _comenzotransaccion As Boolean = False
    If Not OperadorDatos.EstaenTransaccion Then
      OperadorDatos.ComenzarTransaccion()
      _comenzotransaccion = True
    End If

    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Parame_Ubicacion", Parame_Ubicacion)
    OperadorDatos.AgregarParametro("@Pardet_Ubicacion", Pardet_Ubicacion)
    OperadorDatos.AgregarParametro("@Parame_PeriodoInventario", Parame_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Pardet_PeriodoInventario", Pardet_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Invent_Descripcion", Invent_Descripcion)
    OperadorDatos.AgregarParametro("@Invent_Fecha", Invent_Fecha)
    OperadorDatos.AgregarParametro("@Parame_EstadoInventario", Parame_EstadoInventario)
    OperadorDatos.AgregarParametro("@Pardet_EstadoInventario", Pardet_EstadoInventario)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      For Each _invdet As InventarioDet In InventarioDets
        _invdet.Inventario = Me
        If Not _invdet.Guardar Then
          bReturn = False
          Exit For
        End If
      Next

      If Not OperadorDatos.EstaenTransaccion Then
        Me.AceptarCambios()
      End If
    End If
    If _comenzotransaccion Then
      If bReturn Then
        OperadorDatos.TerminarTransaccion()
        AceptarCambios()
      Else
        OperadorDatos.CancelarTransaccion()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
    For Each _invdet As InventarioDet In InventarioDets
      _invdet.AceptarCambios()
    Next
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Parame_Ubicacion", Parame_Ubicacion)
    OperadorDatos.AgregarParametro("@Pardet_Ubicacion", Pardet_Ubicacion)
    OperadorDatos.AgregarParametro("@Parame_PeriodoInventario", Parame_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Pardet_PeriodoInventario", Pardet_PeriodoInventario)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "InventarioList"
Public Class InventarioList
  Inherits System.ComponentModel.BindingList(Of Inventario)

  Public Shared Function ObtenerLista(_OperadorDatos As OperadorDatos, _Ubicacion As WWTSParametroDet, _PeriodoInventario As WWTSParametroDet, Optional ByVal _filtro As String = "") As InventarioList
    Dim oResult As New InventarioList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "F")
      If _Ubicacion IsNot Nothing Then
        .AgregarParametro("@Parame_Ubicacion", _Ubicacion.Parame_Codigo)
        .AgregarParametro("@Pardet_Ubicacion", _Ubicacion.Pardet_Secuencia)
      End If
      If _PeriodoInventario IsNot Nothing Then
        .AgregarParametro("@Parame_PeriodoInventario", _PeriodoInventario.Parame_Codigo)
        .AgregarParametro("@Pardet_PeriodoInventario", _PeriodoInventario.Pardet_Secuencia)
      End If
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Inventario"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Inventario(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function


  Public Shared Function ObtenerUbicaciones(_OperadorDatos As OperadorDatos, _PeriodoInventario As WWTSParametroDet, Optional ByVal _filtro As String = "") As WWTSParametroDetList
    Dim oResult As New WWTSParametroDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "Fu")
      .AgregarParametro("@Parame_PeriodoInventario", _PeriodoInventario.Parame_Codigo)
      .AgregarParametro("@Pardet_PeriodoInventario", _PeriodoInventario.Pardet_Secuencia)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Inventario"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New WWTSParametroDet(_OperadorDatos, Enumerados.EnumParametros.UbicacionActivo, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerListaActivos(_OperadorDatos As OperadorDatos, _Ubicacion As WWTSParametroDet, _PeriodoInventario As WWTSParametroDet, Optional ByVal _filtro As String = "") As InventarioList
    Dim oResult As New InventarioList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "F")
      If _Ubicacion IsNot Nothing Then
        .AgregarParametro("@Parame_Ubicacion", _Ubicacion.Parame_Codigo)
        .AgregarParametro("@Pardet_Ubicacion", _Ubicacion.Pardet_Secuencia)
      End If
      If _PeriodoInventario IsNot Nothing Then
        .AgregarParametro("@Parame_PeriodoInventario", _PeriodoInventario.Parame_Codigo)
        .AgregarParametro("@Pardet_PeriodoInventario", _PeriodoInventario.Pardet_Secuencia)
      End If
      .AgregarParametro("@Pardet_EstadoInventario", 1) 'abierto
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_Inventario"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New Inventario(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
