'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5446
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos


#Region "InventarioDet"
Public Class InventarioDet

  Const _Procedimiento As String = "proc_InventarioDet"

  Private mInventario As Inventario = Nothing

  Private mActivocustodio As ActivoCustodio = Nothing

  Private mActivoubicacion As ActivoUbicacion = Nothing

  Private mPardetEstadoInventario As WWTSParametroDet = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Parame_Ubicacion As Integer, ByVal _Pardet_Ubicacion As Integer, ByVal _Parame_PeriodoInventario As Integer, ByVal _Pardet_PeriodoInventario As Integer, ByVal _Activo_Codigo As Integer)
    Me.New(_OperadorDatos, False)
    Parame_Ubicacion = _Parame_Ubicacion
    Pardet_Ubicacion = _Pardet_Ubicacion
    Parame_PeriodoInventario = _Parame_PeriodoInventario
    Pardet_PeriodoInventario = _Pardet_PeriodoInventario
    Activo_Codigo = _Activo_Codigo
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto InventarioDet")
    End If
  End Sub

  'Inventario
  Public Overridable Property Inventario() As Inventario
    Get
      If Me.mInventario Is Nothing AndAlso Pardet_Ubicacion > 0 AndAlso Pardet_PeriodoInventario > 0 AndAlso Activo_Codigo > 0 Then
        Me.mInventario = New Inventario(OperadorDatos, Parame_Ubicacion, Pardet_Ubicacion, Parame_PeriodoInventario, Pardet_PeriodoInventario)
      End If
      Return Me.mInventario
    End Get
    Set(value As Inventario)
      Me.mInventario = value
      Parame_Ubicacion = value.Parame_Ubicacion
      Pardet_Ubicacion = value.Pardet_Ubicacion
      Parame_PeriodoInventario = value.Parame_PeriodoInventario
      Pardet_PeriodoInventario = value.Pardet_PeriodoInventario
    End Set
  End Property

  'Activocustodio
  Public Overridable Property Activocustodio() As ActivoCustodio
    Get
      If Me.mActivocustodio Is Nothing AndAlso Activo_Codigo > 0 AndAlso ActCus_SecuenciaAnterior > 0 Then
        Me.mActivocustodio = New ActivoCustodio(OperadorDatos, Activo_Codigo, ActCus_SecuenciaAnterior)
      End If
      Return Me.mActivocustodio
    End Get
    Set(value As ActivoCustodio)
      Me.mActivocustodio = value
      Activo_Codigo = value.Activo_Codigo
      ActCus_SecuenciaAnterior = value.ActCus_Secuencia
    End Set
  End Property

  'Activoubicacion
  Public Overridable Property Activoubicacion() As ActivoUbicacion
    Get
      If Me.mActivoubicacion Is Nothing AndAlso Activo_Codigo > 0 AndAlso ActUbi_SecuenciaAnterior > 0 Then
        Me.mActivoubicacion = New ActivoUbicacion(OperadorDatos, Activo_Codigo, ActUbi_SecuenciaAnterior)
      End If
      Return Me.mActivoubicacion
    End Get
    Set(value As ActivoUbicacion)
      Me.mActivoubicacion = value
      Activo_Codigo = value.Activo_Codigo
      ActUbi_SecuenciaAnterior = value.ActUbi_Secuencia
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetEstadoInventario() As WWTSParametroDet
    Get
      If mPardetEstadoInventario Is Nothing AndAlso Pardet_EstadoInventario > 0 Then
        mPardetEstadoInventario = New WWTSParametroDet(OperadorDatos, Parame_EstadoInventario, Pardet_EstadoInventario)
      End If
      Return Me.mPardetEstadoInventario
    End Get
    Set(value As WWTSParametroDet)
      Me.mPardetEstadoInventario = value
      Parame_EstadoInventario = value.Parame_Codigo
      Pardet_EstadoInventario = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Estado", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 95, True)> _
  Public ReadOnly Property EstadoInventario() As String
    Get
      If PardetEstadoInventario Is Nothing Then
        Return String.Empty
      Else
        Return PardetEstadoInventario.Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Código barras", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 125, True)> _
  Public ReadOnly Property CodigoBarrasString() As String
    Get
      If Activoubicacion Is Nothing OrElse Activoubicacion.Activo Is Nothing Then
        Return String.Empty
      Else
        Return Activoubicacion.Activo.Activo_CodigoBarra
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Activo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 500, True)> _
  Public ReadOnly Property ActivoString() As String
    Get
      If Activoubicacion Is Nothing Then
        Return String.Empty
      Else
        Return Activoubicacion.ActivoString
      End If
    End Get
  End Property

  Public ReadOnly Property PeriodoString As String
    Get
      If Inventario Is Nothing Then
        Return String.Empty
      Else
        Return Inventario.PeriodoString
      End If
    End Get
  End Property

  Public ReadOnly Property Fecha As Date
    Get
      If Inventario Is Nothing Then
        Return Nothing
      Else
        Return Inventario.Invent_Fecha
      End If
    End Get
  End Property

  Public ReadOnly Property EstadoInventarioString As String
    Get
      If Inventario Is Nothing Then
        Return String.Empty
      Else
        Return Inventario.EstadoString
      End If
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Parame_Ubicacion = CType(Fila("Parame_Ubicacion"), Integer)
    Pardet_Ubicacion = CType(Fila("Pardet_Ubicacion"), Integer)
    Parame_PeriodoInventario = CType(Fila("Parame_PeriodoInventario"), Integer)
    Pardet_PeriodoInventario = CType(Fila("Pardet_PeriodoInventario"), Integer)
    Activo_Codigo = CType(Fila("Activo_Codigo"), Integer)
    InvDet_Observacion = CType(Fila("InvDet_Observacion"), String)
    InvDet_esCambioUbicacion = CType(Fila("InvDet_esCambioUbicacion"), Boolean)
    ActUbi_SecuenciaAnterior = CType(Fila("ActUbi_SecuenciaAnterior"), Integer)
    If Not TypeOf (Fila("ActUbi_SecuenciaActual")) Is DBNull Then
      ActUbi_SecuenciaActual = CType(Fila("ActUbi_SecuenciaActual"), Integer)
    Else
      ActUbi_SecuenciaActual = 0
    End If
    InvDet_esCambioCustodio = CType(Fila("InvDet_esCambioCustodio"), Boolean)
    ActCus_SecuenciaAnterior = CType(Fila("ActCus_SecuenciaAnterior"), Integer)
    If Not TypeOf (Fila("ActCus_SecuenciaActual")) Is DBNull Then
      ActCus_SecuenciaActual = CType(Fila("ActCus_SecuenciaActual"), Integer)
    Else
      ActCus_SecuenciaActual = 0
    End If
    Parame_EstadoInventario = CType(Fila("Parame_EstadoInventario"), Integer)
    Pardet_EstadoInventario = CType(Fila("Pardet_EstadoInventario"), Integer)
    InvDet_Activo = CType(Fila("InvDet_Activo"), Boolean)
    If Not TypeOf (Fila("Usuari_CodigoPDA")) Is DBNull Then
      Usuari_CodigoPDA = CStr(Fila("Usuari_CodigoPDA"))
    Else
      Usuari_CodigoPDA = String.Empty
    End If
    If Not TypeOf (Fila("Usuari_FechaHoraRegistro")) Is DBNull Then
      Usuari_FechaHoraRegistro = CDate(Fila("Usuari_FechaHoraRegistro"))
    Else
      Usuari_FechaHoraRegistro = Nothing
    End If
    mInventario = Nothing
    mActivocustodio = Nothing
    mActivoubicacion = Nothing
    mPardetEstadoInventario = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.DataTable = New System.Data.DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Parame_Ubicacion", Parame_Ubicacion)
    OperadorDatos.AgregarParametro("@Pardet_Ubicacion", Pardet_Ubicacion)
    OperadorDatos.AgregarParametro("@Parame_PeriodoInventario", Parame_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Pardet_PeriodoInventario", Pardet_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Parame_Ubicacion", Parame_Ubicacion)
    OperadorDatos.AgregarParametro("@Pardet_Ubicacion", Pardet_Ubicacion)
    OperadorDatos.AgregarParametro("@Parame_PeriodoInventario", Parame_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Pardet_PeriodoInventario", Pardet_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.AgregarParametro("@InvDet_Observacion", InvDet_Observacion)
    OperadorDatos.AgregarParametro("@InvDet_esCambioUbicacion", InvDet_esCambioUbicacion)
    OperadorDatos.AgregarParametro("@ActUbi_SecuenciaAnterior", ActUbi_SecuenciaAnterior)
    If ActUbi_SecuenciaActual > 0 Then
      OperadorDatos.AgregarParametro("@ActUbi_SecuenciaActual", ActUbi_SecuenciaActual)
    End If
    OperadorDatos.AgregarParametro("@InvDet_esCambioCustodio", InvDet_esCambioCustodio)
    OperadorDatos.AgregarParametro("@ActCus_SecuenciaAnterior", ActCus_SecuenciaAnterior)
    If ActCus_SecuenciaActual > 0 Then
      OperadorDatos.AgregarParametro("@ActCus_SecuenciaActual", ActCus_SecuenciaActual)
    End If
    OperadorDatos.AgregarParametro("@Parame_EstadoInventario", Parame_EstadoInventario)
    OperadorDatos.AgregarParametro("@Pardet_EstadoInventario", Pardet_EstadoInventario)
    OperadorDatos.AgregarParametro("@InvDet_Activo", InvDet_Activo)
    If Not String.IsNullOrWhiteSpace(Usuari_CodigoPDA) Then
      OperadorDatos.AgregarParametro("@Usuari_CodigoPDA", Usuari_CodigoPDA)
    End If
    If Not Usuari_FechaHoraRegistro = Nothing Then
      OperadorDatos.AgregarParametro("@Usuari_FechaHoraRegistro", Usuari_FechaHoraRegistro)
    End If
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If Not OperadorDatos.EstaenTransaccion Then
        Me.AceptarCambios()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Function Guardar(mCustodio As Integer, mParame_Ubicacion As Integer, mPardet_Ubicacion As Integer) As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Parame_Ubicacion", Parame_Ubicacion)
    OperadorDatos.AgregarParametro("@Pardet_Ubicacion", Pardet_Ubicacion)
    OperadorDatos.AgregarParametro("@Parame_PeriodoInventario", Parame_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Pardet_PeriodoInventario", Pardet_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)

    OperadorDatos.AgregarParametro("@InvDet_Observacion", InvDet_Observacion)
    OperadorDatos.AgregarParametro("@Emplea_Custodio", mCustodio)
    OperadorDatos.AgregarParametro("@Parame_UbicacionNueva", mParame_Ubicacion)
    OperadorDatos.AgregarParametro("@Pardet_UbicacionNueva", mPardet_Ubicacion)

    OperadorDatos.AgregarParametro("@Parame_EstadoInventario", Parame_EstadoInventario)
    OperadorDatos.AgregarParametro("@Pardet_EstadoInventario", Pardet_EstadoInventario)
    OperadorDatos.AgregarParametro("@InvDet_Activo", InvDet_Activo)
    If Not String.IsNullOrWhiteSpace(Usuari_CodigoPDA) Then
      OperadorDatos.AgregarParametro("@Usuari_CodigoPDA", Usuari_CodigoPDA)
    End If
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If Not OperadorDatos.EstaenTransaccion Then
        Me.AceptarCambios()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Parame_Ubicacion", Parame_Ubicacion)
    OperadorDatos.AgregarParametro("@Pardet_Ubicacion", Pardet_Ubicacion)
    OperadorDatos.AgregarParametro("@Parame_PeriodoInventario", Parame_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Pardet_PeriodoInventario", Pardet_PeriodoInventario)
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "InventarioDetList"
Public Class InventarioDetList
  Inherits System.ComponentModel.BindingList(Of InventarioDet)

  Public Shared Function ObtenerLista(ByVal _Inventario As Inventario, Optional ByVal _filtro As String = "") As InventarioDetList
    Dim oResult As New InventarioDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Inventario.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Parame_Ubicacion", _Inventario.Parame_Ubicacion)
      .AgregarParametro("@Pardet_Ubicacion", _Inventario.Pardet_Ubicacion)
      .AgregarParametro("@Parame_PeriodoInventario", _Inventario.Parame_PeriodoInventario)
      .AgregarParametro("@Pardet_PeriodoInventario", _Inventario.Pardet_PeriodoInventario)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_InventarioDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New InventarioDet(_Inventario.OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerLista(ByVal _Activo As Activo, Optional ByVal _filtro As String = "") As InventarioDetList
    Dim oResult As New InventarioDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Activo.OperadorDatos
      .AgregarParametro("@Accion", "FA")
      .AgregarParametro("@Activo_Codigo", _Activo.Activo_Codigo)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_InventarioDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New InventarioDet(_Activo.OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerActivos(ByVal _Activo As Activo, Optional ByVal _filtro As String = "") As InventarioDetList
    Dim oResult As New InventarioDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Activo.OperadorDatos
      .AgregarParametro("@Accion", "Fa")
      .AgregarParametro("@Activo_Codigo", _Activo.Activo_Codigo)
      .AgregarParametro("@InvDet_Activo", True)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_InventarioDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New InventarioDet(_Activo.OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
