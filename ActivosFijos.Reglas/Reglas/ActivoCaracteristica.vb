'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5446
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos


#Region "ActivoCaracteristica"
Public Class ActivoCaracteristica

  Const _Procedimiento As String = "proc_ActivoCaracteristica"

  Private mActivo As Activo = Nothing

  Private mPardetCaracteristica As WWTSParametroDet = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Activo_Codigo As Integer, ByVal _Parame_Caracteristica As Integer, ByVal _Pardet_Caracteristica As Integer)
    Me.New(_OperadorDatos, False)
    Activo_Codigo = _Activo_Codigo
    Parame_Caracteristica = _Parame_Caracteristica
    Pardet_Caracteristica = _Pardet_Caracteristica
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto ActivoCaracteristica")
    End If
  End Sub

  'Activo
  Public Overridable Property Activo() As Activo
    Get
      If mActivo Is Nothing AndAlso Activo_Codigo > 0 Then
        mActivo = New Activo(OperadorDatos, Activo_Codigo)
      End If
      Return Me.mActivo
    End Get
    Set(value As Activo)
      Me.mActivo = value
      Activo_Codigo = value.Activo_Codigo
    End Set
  End Property

  'Parametrodet
  Public Overridable Overloads Property PardetCaracteristica() As WWTSParametroDet
    Get
      If mPardetCaracteristica Is Nothing AndAlso Pardet_Caracteristica > 0 Then
        mPardetCaracteristica = New WWTSParametroDet(OperadorDatos, Parame_Caracteristica, Pardet_Caracteristica)
      End If
      Return Me.mPardetCaracteristica
    End Get
    Set(value As WWTSParametroDet)
      Me.mPardetCaracteristica = value
      Parame_Caracteristica = value.Parame_Codigo
      Pardet_Caracteristica = value.Pardet_Secuencia
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Caracteristica", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 150, True)> _
  Public ReadOnly Property CaracteristicaString() As String
    Get
      If PardetCaracteristica Is Nothing Then
        Return String.Empty
      Else
        Return PardetCaracteristica.Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Descripción", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 120, True)> _
  Public Property Descripcion() As String
    Get
      Return ActCar_Descripcion
    End Get
    Set(value As String)
      ActCar_Descripcion = value
    End Set
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Activo_Codigo = CType(Fila("Activo_Codigo"), Integer)
    Parame_Caracteristica = CType(Fila("Parame_Caracteristica"), Integer)
    Pardet_Caracteristica = CType(Fila("Pardet_Caracteristica"), Integer)
    ActCar_Descripcion = CStr(Fila("ActCar_Descripcion"))
    mActivo = Nothing
    mPardetCaracteristica = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.DataTable = New System.Data.DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Caracteristica", Parame_Caracteristica)
    OperadorDatos.AgregarParametro("@Pardet_Caracteristica", Pardet_Caracteristica)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Caracteristica", Parame_Caracteristica)
    OperadorDatos.AgregarParametro("@Pardet_Caracteristica", Pardet_Caracteristica)
    OperadorDatos.AgregarParametro("@ActCar_Descripcion", ActCar_Descripcion)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If OperadorDatos.EstaenTransaccion Then
      Else
        Me.AceptarCambios()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.AgregarParametro("@Parame_Caracteristica", Parame_Caracteristica)
    OperadorDatos.AgregarParametro("@Pardet_Caracteristica", Pardet_Caracteristica)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "ActivoCaracteristicaList"
Public Class ActivoCaracteristicaList
  Inherits System.ComponentModel.BindingList(Of ActivoCaracteristica)

  Public Shared Function ObtenerLista(ByVal _Activo As Activo, Optional ByVal _filtro As String = "") As ActivoCaracteristicaList
    Dim oResult As New ActivoCaracteristicaList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Activo.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Activo_Codigo", _Activo.Activo_Codigo)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_ActivoCaracteristica"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New ActivoCaracteristica(_Activo.OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
