'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5446
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos


#Region "DepreciacionDet"
Public Class DepreciacionDet

  Const _Procedimiento As String = "proc_DepreciacionDet"

  Private mActivovalor As ActivoValor = Nothing

  Private mDepreciacion As Depreciacion = Nothing

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Parame_FrecuenciaDepreciacion As Integer, ByVal _Pardet_FrecuenciaDepreciacion As Integer, ByVal _Parame_TipoDepreciacion As Integer, ByVal _Pardet_TipoDepreciacion As Integer, ByVal _Deprec_Codigo As String, ByVal _Activo_Codigo As Integer)
    Me.New(_OperadorDatos, False)
    Parame_FrecuenciaDepreciacion = _Parame_FrecuenciaDepreciacion
    Pardet_FrecuenciaDepreciacion = _Pardet_FrecuenciaDepreciacion
    Parame_TipoDepreciacion = _Parame_TipoDepreciacion
    Pardet_TipoDepreciacion = _Pardet_TipoDepreciacion
    Deprec_Codigo = _Deprec_Codigo
    Activo_Codigo = _Activo_Codigo
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto DepreciacionDet")
    End If
  End Sub

  'Activovalor
  Public Overridable Property Activovalor() As ActivoValor
    Get
      If mActivovalor Is Nothing AndAlso Activo_Codigo > 0 AndAlso ActVal_Secuencia > 0 Then
        mActivovalor = New ActivoValor(OperadorDatos, Activo_Codigo, Parame_TipoDepreciacion, Pardet_TipoDepreciacion, ActVal_Secuencia)
      End If
      Return Me.mActivovalor
    End Get
    Set(value As ActivoValor)
      Me.mActivovalor = value
      Activo_Codigo = value.Activo_Codigo
      Parame_TipoDepreciacion = value.Parame_TipoDepreciacion
      Pardet_TipoDepreciacion = value.Pardet_TipoDepreciacion
      ActVal_Secuencia = value.ActVal_Secuencia
    End Set
  End Property

  'Depreciacion
  Public Overridable Property Depreciacion() As Depreciacion
    Get
      If mDepreciacion Is Nothing AndAlso Not String.IsNullOrEmpty(Deprec_Codigo) Then
        mDepreciacion = New Depreciacion(OperadorDatos, Parame_FrecuenciaDepreciacion, Pardet_FrecuenciaDepreciacion, Parame_TipoDepreciacion, Pardet_TipoDepreciacion, Deprec_Codigo)
      End If
      Return Me.mDepreciacion
    End Get
    Set(value As Depreciacion)
      Me.mDepreciacion = value
      Parame_FrecuenciaDepreciacion = value.Parame_FrecuenciaDepreciacion
      Pardet_FrecuenciaDepreciacion = value.Pardet_FrecuenciaDepreciacion
      Parame_TipoDepreciacion = value.Parame_TipoDepreciacion
      Pardet_TipoDepreciacion = value.Pardet_TipoDepreciacion
      Deprec_Codigo = value.Deprec_Codigo
    End Set
  End Property

  'Activo
  Public Overridable ReadOnly Property Activo() As Activo
    Get
      If Activovalor IsNot Nothing Then
        Return Activovalor.Activo
      Else
        Return Nothing
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Codigo Barras", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 150, True)> _
  Public ReadOnly Property CodigoBarras() As String
    Get
      If Activo Is Nothing Then
        Return String.Empty
      Else
        Return Activo.CodigoBarra
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Activo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 250, True)> _
  Public ReadOnly Property ActivoString() As String
    Get
      If Activo Is Nothing Then
        Return String.Empty
      Else
        Return Activo.Descripcion
      End If
    End Get
  End Property

  'Parametrodet
  Public Overridable ReadOnly Property PardetFrecuenciaDepreciacion() As WWTSParametroDet
    Get
      If Activovalor IsNot Nothing Then
        Return Activovalor.PardetFrecuenciaDepreciacion
      Else
        Return Nothing
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Frecuencia", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 100, True)> _
  Public ReadOnly Property FrecuenciaString() As String
    Get
      If PardetFrecuenciaDepreciacion Is Nothing Then
        Return String.Empty
      Else
        Return PardetFrecuenciaDepreciacion.Descripcion
      End If
    End Get
  End Property

  'Parametrodet
  Public Overridable ReadOnly Property PardetTipoDepreciacion() As WWTSParametroDet
    Get
      If Activovalor IsNot Nothing Then
        Return Activovalor.PardetTipoDepreciacion
      Else
        Return Nothing
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Tipo Depreciación", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 100, True)> _
  Public ReadOnly Property TipoDepreciacionString() As String
    Get
      If PardetTipoDepreciacion Is Nothing Then
        Return String.Empty
      Else
        Return PardetTipoDepreciacion.Descripcion
      End If
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Periodo", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 100, True)> _
  Public ReadOnly Property PeriodoString() As String
    Get
      Return Deprec_Codigo
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Depreciado", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Decimales, 85, True)> _
  Public ReadOnly Property Depreciado() As Decimal
    Get
      Return Deprec_Valor
    End Get
  End Property

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Parame_FrecuenciaDepreciacion = CType(Fila("Parame_FrecuenciaDepreciacion"), Integer)
    Pardet_FrecuenciaDepreciacion = CType(Fila("Pardet_FrecuenciaDepreciacion"), Integer)
    Parame_TipoDepreciacion = CType(Fila("Parame_TipoDepreciacion"), Integer)
    Pardet_TipoDepreciacion = CType(Fila("Pardet_TipoDepreciacion"), Integer)
    Deprec_Codigo = CType(Fila("Deprec_Codigo"), String)
    Activo_Codigo = CType(Fila("Activo_Codigo"), Integer)
    ActVal_Secuencia = CType(Fila("ActVal_Secuencia"), Integer)
    Deprec_Valor = CType(Fila("Deprec_Valor"), Decimal)
    Deprec_CtaActivoFijo = CType(Fila("Deprec_CtaActivoFijo"), String)
    Deprec_CtaCentroCosto = CType(Fila("Deprec_CtaCentroCosto"), String)
    Deprec_CtaGasto = CType(Fila("Deprec_CtaGasto"), String)
    Deprec_Ubicacion = CStr(Fila("Deprec_Ubicacion"))
    mActivovalor = Nothing
    mDepreciacion = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.DataTable = New System.Data.DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Parame_FrecuenciaDepreciacion", Parame_FrecuenciaDepreciacion)
    OperadorDatos.AgregarParametro("@Pardet_FrecuenciaDepreciacion", Pardet_FrecuenciaDepreciacion)
    OperadorDatos.AgregarParametro("@Parame_TipoDepreciacion", Parame_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@Pardet_TipoDepreciacion", Pardet_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@Deprec_Codigo", Deprec_Codigo)
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar() As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If
    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Parame_FrecuenciaDepreciacion", Parame_FrecuenciaDepreciacion)
    OperadorDatos.AgregarParametro("@Pardet_FrecuenciaDepreciacion", Pardet_FrecuenciaDepreciacion)
    OperadorDatos.AgregarParametro("@Parame_TipoDepreciacion", Parame_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@Pardet_TipoDepreciacion", Pardet_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@Deprec_Codigo", Deprec_Codigo)
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.AgregarParametro("@ActVal_Secuencia", ActVal_Secuencia)
    OperadorDatos.AgregarParametro("@Deprec_Valor", Deprec_Valor)
    OperadorDatos.AgregarParametro("@Deprec_CtaActivoFijo", Deprec_CtaActivoFijo)
    OperadorDatos.AgregarParametro("@Deprec_CtaCentroCosto", Deprec_CtaCentroCosto)
    OperadorDatos.AgregarParametro("@Deprec_CtaGasto", Deprec_CtaGasto)
    OperadorDatos.AgregarParametro("@Deprec_Ubicacion", Deprec_Ubicacion)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If OperadorDatos.EstaenTransaccion Then
      Else
        Me.AceptarCambios()
      End If
    End If
    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Parame_FrecuenciaDepreciacion", Parame_FrecuenciaDepreciacion)
    OperadorDatos.AgregarParametro("@Pardet_FrecuenciaDepreciacion", Pardet_FrecuenciaDepreciacion)
    OperadorDatos.AgregarParametro("@Parame_TipoDepreciacion", Parame_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@Pardet_TipoDepreciacion", Pardet_TipoDepreciacion)
    OperadorDatos.AgregarParametro("@Deprec_Codigo", Deprec_Codigo)
    OperadorDatos.AgregarParametro("@Activo_Codigo", Activo_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "DepreciacionDetList"
Public Class DepreciacionDetList
  Inherits System.ComponentModel.BindingList(Of DepreciacionDet)

  Public Shared Function ObtenerLista(_Depreciacion As Depreciacion) As DepreciacionDetList
    Dim oResult As New DepreciacionDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _Depreciacion.OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Parame_FrecuenciaDepreciacion", _Depreciacion.Parame_FrecuenciaDepreciacion)
      .AgregarParametro("@Pardet_FrecuenciaDepreciacion", _Depreciacion.Pardet_FrecuenciaDepreciacion)
      .AgregarParametro("@Parame_TipoDepreciacion", _Depreciacion.Parame_TipoDepreciacion)
      .AgregarParametro("@Pardet_TipoDepreciacion", _Depreciacion.Pardet_TipoDepreciacion)
      .AgregarParametro("@Deprec_Codigo", _Depreciacion.Deprec_Codigo)
      .Procedimiento = "proc_DepreciacionDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New DepreciacionDet(_Depreciacion.OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function

  Public Shared Function ObtenerLista(_ActivoValor As ActivoValor) As DepreciacionDetList
    Dim oResult As New DepreciacionDetList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _ActivoValor.OperadorDatos
      .AgregarParametro("@Accion", "Fv")
      .AgregarParametro("@Activo_Codigo", _ActivoValor.Activo_Codigo)
      .AgregarParametro("@Parame_TipoDepreciacion", _ActivoValor.Parame_TipoDepreciacion)
      .AgregarParametro("@Pardet_TipoDepreciacion", _ActivoValor.Pardet_TipoDepreciacion)
      .AgregarParametro("@ActVal_Secuencia", _ActivoValor.ActVal_Secuencia)
      .Procedimiento = "proc_DepreciacionDet"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New DepreciacionDet(_ActivoValor.OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
