'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5446
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Infoware.Datos


#Region "TransaccionActivo"
Public Class TransaccionActivo

  Const _Procedimiento As String = "proc_TransaccionActivo"

  Private mUsuario As WWTSUsuario = Nothing



  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _EsNuevo As Boolean)
    MyBase.New()
    OperadorDatos = _OperadorDatos
    EsNuevo = _EsNuevo
  End Sub

  Public Sub New(ByVal _OperadorDatos As OperadorDatos, ByVal _Transa_Codigo As Integer)
    Me.New(_OperadorDatos, False)
    Transa_Codigo = _Transa_Codigo
    If Me.Recargar Then
    Else
      Throw New System.Exception("No se puede cargar objeto TransaccionActivo")
    End If
  End Sub

  'Usuario
  Public Overridable Property Usuario() As WWTSUsuario
    Get
      If mUsuario Is Nothing AndAlso Not String.IsNullOrEmpty(Usuari_Codigo) Then
        mUsuario = New WWTSUsuario(OperadorDatos, Usuari_Codigo)
      End If
      Return Me.mUsuario
    End Get
    Set(value As WWTSUsuario)
      Me.mUsuario = value
      Usuari_Codigo = value.Usuari_Codigo
    End Set
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Usuario", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 150, True)>
  Public ReadOnly Property UsuarioString As String
    Get
      If Usuario Is Nothing Then
        Return String.Empty
      Else
        Return Usuario.Usuari_Descripcion
      End If
    End Get
  End Property

  Public ReadOnly Property Descripcion As String
    Get
      Return String.Format("{0}", Transa_Observacion)
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Observación", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Texto, 200, True)>
  Public ReadOnly Property Observacion As String
    Get
      Return Transa_Observacion
    End Get
  End Property

  <Infoware.Reportes.CampoReporteAtributo("Fecha", Infoware.Reportes.CampoReporteAtributo.EnumTipoDato.Fecha, 100, True)>
  Public ReadOnly Property Fecha As Date
    Get
      Return Transa_Fecha
    End Get
  End Property

  Public ReadOnly Property CambioCustodioList As ActivoCustodioList
    Get
      Return ActivoCustodioList.ObtenerLista(Me)
    End Get
  End Property

  Public ReadOnly Property CambioUbicacionList As ActivoUbicacionList
    Get
      Return ActivoUbicacionList.ObtenerLista(Me)
    End Get
  End Property

  Public ReadOnly Property ContieneSolicitarConfirmacionCambioCustodio As Boolean
    Get
      Dim cambios As ActivoCustodioList = CambioCustodioList
      If cambios IsNot Nothing AndAlso cambios.Count > 0 Then
        For Each _activocustodio As ActivoCustodio In cambios
          If _activocustodio.Pardet_AprobadoNuevoCustodio = Enumerados.EnumAprobacionNuevoCustodio.Pendiente Then
            Return True
          End If
        Next
      End If
      Return False
    End Get
  End Property

#Region "ActivoList"
  Private WithEvents mActivos As ActivoList = Nothing

  Public Property Activos As ActivoList
    Get
      If mActivos Is Nothing Then
        'If EsNuevo Then
        mActivos = New ActivoList
        'Else
        '  mActivos = ActivoList.ObtenerLista(Me)
        'End If
      End If
      Return mActivos
    End Get
    Set(value As ActivoList)
      mActivos = value
    End Set
  End Property

  Private Sub mActivos_AddingNew(sender As Object, e As System.ComponentModel.AddingNewEventArgs) Handles mActivos.AddingNew
    Dim _caract = New Activo(OperadorDatos, True)
    e.NewObject = _caract
  End Sub
#End Region

  Public Overridable Sub MapearDataRowaObjeto(ByVal Fila As DataRow)
    Transa_Codigo = CType(Fila("Transa_Codigo"), Integer)
    Usuari_Codigo = CStr(Fila("Usuari_Codigo"))
    Transa_Observacion = CType(Fila("Transa_Observacion"), String)
    Transa_Fecha = CDate(Fila("Transa_Fecha"))
    mUsuario = Nothing
  End Sub

  Public Overridable Function Recargar() As Boolean
    Dim Result As System.Data.DataTable = New System.Data.DataTable
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "C")
    OperadorDatos.AgregarParametro("@Transa_Codigo", Transa_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    Try
      Me.MapearDataRowaObjeto(Result.Rows(0))
      EsNuevo = False
      EsModificado = False
    Catch ex As System.Exception
      bReturn = False
    End Try
    Return bReturn
  End Function

  Public Overridable Function Guardar(_Custodio As Empleado, _SolicitarConfirmacionNuevoCustodio As Boolean, _Ubicacion As WWTSParametroDet) As Boolean
    Dim Result As Integer = 0
    Dim bReturn As Boolean = True
    Dim sAccion As String = "M"
    If EsNuevo Then
      sAccion = "I"
    End If

    Dim _comenzotransaccion As Boolean = False
    If Not OperadorDatos.EstaenTransaccion Then
      OperadorDatos.ComenzarTransaccion()
      _comenzotransaccion = True
    End If

    OperadorDatos.AgregarParametro("@accion", sAccion)
    OperadorDatos.AgregarParametro("@Transa_Codigo", Transa_Codigo)
    OperadorDatos.AgregarParametro("@Usuari_Codigo", Usuari_Codigo)
    OperadorDatos.AgregarParametro("@Transa_Observacion", Transa_Observacion)
    OperadorDatos.AgregarParametro("@Transa_Fecha", Transa_Fecha)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar(Result)
    OperadorDatos.LimpiarParametros()
    If bReturn Then
      If EsNuevo Then
        Transa_Codigo = Result

        If _Custodio IsNot Nothing Then
          For Each _activo As Activo In Activos
            Dim _activocustodio As New ActivoCustodio(OperadorDatos, True)
            _activocustodio.TransaccionActivo = Me
            _activocustodio.Activo = _activo
            _activocustodio.PardetAprobadoNuevoCustodio = New WWTSParametroDet(OperadorDatos, Enumerados.EnumParametros.AprobacionNuevoCustodio, CInt(IIf(_SolicitarConfirmacionNuevoCustodio, Enumerados.EnumAprobacionNuevoCustodio.Pendiente, Enumerados.EnumAprobacionNuevoCustodio.Aprobado)))
            _activocustodio.ActCus_Activo = Not _SolicitarConfirmacionNuevoCustodio
            _activocustodio.Empleado = _Custodio
            _activocustodio.ActCus_FechaDesde = Transa_Fecha
            If Not _activocustodio.Guardar Then
              bReturn = False
              Exit For
            End If
          Next
        End If

        If _Ubicacion IsNot Nothing Then
          For Each _activo As Activo In Activos
            Dim _activoUbicacion As New ActivoUbicacion(OperadorDatos, True)
            _activoUbicacion.TransaccionActivo = Me
            _activoUbicacion.Activo = _activo
            _activoUbicacion.ActUbi_Activo = True
            _activoUbicacion.PardetUbicacion = _Ubicacion
            _activoUbicacion.ActUbi_FechaDesde = Transa_Fecha
            If Not _activoUbicacion.Guardar Then
              bReturn = False
              Exit For
            End If
          Next
        End If
      End If

      If Not OperadorDatos.EstaenTransaccion Then
        Me.AceptarCambios()
      End If
    End If
    If _comenzotransaccion Then
      If bReturn Then
        OperadorDatos.TerminarTransaccion()
        AceptarCambios()
      Else
        OperadorDatos.CancelarTransaccion()
      End If
    End If

    Return bReturn
  End Function

  Public Overridable Sub AceptarCambios()
    EsNuevo = False
    EsModificado = False
  End Sub

  Public Overridable Function Eliminar() As Boolean
    Dim bReturn As Boolean = True
    OperadorDatos.AgregarParametro("@accion", "E")
    OperadorDatos.AgregarParametro("@Transa_Codigo", Transa_Codigo)
    OperadorDatos.Procedimiento = _Procedimiento
    bReturn = OperadorDatos.Ejecutar
    OperadorDatos.LimpiarParametros()
    Return bReturn
  End Function
End Class
#End Region

#Region "TransaccionActivoList"
Public Class TransaccionActivoList
  Inherits System.ComponentModel.BindingList(Of TransaccionActivo)

  Public Shared Function ObtenerLista(_OperadorDatos As OperadorDatos, _Usuario As WWTSUsuario, Optional ByVal _filtro As String = "") As TransaccionActivoList
    Dim oResult As New TransaccionActivoList
    Dim bReturn As Boolean
    Dim ds As DataTable = Nothing
    With _OperadorDatos
      .AgregarParametro("@Accion", "F")
      .AgregarParametro("@Usuari_Codigo", _Usuario.Usuari_Codigo)
      .AgregarParametro("@filtro", _filtro)
      .Procedimiento = "proc_TransaccionActivo"
      bReturn = .Ejecutar(ds)
      .LimpiarParametros()
    End With
    If bReturn AndAlso Not ds Is Nothing AndAlso ds.Rows.Count > 0 Then
      For Each _dr As DataRow In ds.Rows
        Dim _fila As New TransaccionActivo(_OperadorDatos, False)
        _fila.MapearDataRowaObjeto(_dr)
        oResult.Add(_fila)
      Next
    End If
    Return oResult
  End Function
End Class
#End Region
